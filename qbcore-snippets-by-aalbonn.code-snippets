	// Place your genel snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.

{
    "Notify" : { 
       	"prefix": "qbnotify",
		"body": [
		  "QBCore.Functions.Notify('${1:Default Text}', '${2:Type}', 7500)",
		],
		"description": "error, sucess, primary, police, ambulance."
	  },
		  
    "ServerNotify" : { 
     "prefix": "qbnotifyserver",
      "body": [
      "local src = source",
      "TriggerClientEvent('QBCore:Notify', src, '${1:Default Text}', '${2:Type}', 7500)",
     ],
     "description": "error, sucess, primary, police, ambulance."
     },

     "GetPlayerData" : { 
       
        "prefix": "qbgetplayer", 
         
        "body": [  
    
        "local PlayerData = QBCore.Functions.GetPlayerData()",
        
        ],
        "description": "Gets all the player data from the client"
      },

      "GetCoreObject()" : { 
       
        "prefix": "qbgetobject", 
         
        "body": [  
    
          "local QBCore = exports['qb-core']:GetCoreObject()",
        ],
        "description": "QBCore new export method"
      },

      "isLoggedIn" : { 
       
        "prefix": "LocalPlayer.state['isLoggedIn']", 
         
        "body": [  
    
          "LocalPlayer.state['isLoggedIn']",
        ],
        "description": "QBCore new isLoggedIn method"
      },

      "HasItem" : { 
       
        "prefix": "qbhasitem", 
         
        "body": [  
    
          "QBCore.Functions.HasItem('ItemName)"
        ],
        "description": "Returns whether or not a player has a certain item."
      },

      "Add Commands" : { 
       
        "prefix": "qbcommandsadd", 
         
        "body": [  
    
          "QBCore.Commands.Add('commandnamehere', 'help text here', {}, false, function(source, args)",
          "    $0",
          "end)",
        ],
        "description": "Add a command using QBCore.Commands.Add"
      },

      "CreateUseableItem" : { 
       
        "prefix": "qbcreateitem", 
         
        "body": [  
    
          "QBCore.Functions.CreateUseableItem(item , function(item)",
          "    $0",
          "end)",
        ],
        "description": "Makes an item useable."
      },

      "DrawText" : { 
       
        "prefix": "qbdrawtext", 
         
        "body": [  
    
          "function DrawText(x, y, width, height, scale, r, g, b, a, text)",
          "    SetTextFont(4)",
          "    SetTextProportional(0)",
          "    SetTextScale(scale, scale)",
          "    SetTextColour(r, g, b, a)",
          "    SetTextDropShadow(0, 0, 0, 0,255)",
          "    SetTextEdge(2, 0, 0, 0, 255)",
          "    SetTextDropShadow()",
          "    SetTextOutline()",
          "    SetTextEntry('STRING')",
          "    AddTextComponentString(text)",
          "    DrawText(x - width/2, y - height/2 + 0.005)",
          "end",
        ],
        "description": "Not used as commonly as 3D text, you can draw text on the screen with this function which makes it more convenient than having to make a new function locally."
      },

      "CreateThread" : { 
       
        "prefix": "CreateThread", 
         
        "body": [  
    
          "CreateThread(function()",
          "    while true do",
          "        Wait(1)",
          "        $0",
          "    end",
          "end)"
        ],
        "description": "Create a thread"
      },

      "onResourceStart" : { 
       
        "prefix": "onResourceStart", 
         
        "body": [  
    
          "AddEventHandler('onResourceStart', function(resource)",
          "   if resource == GetCurrentResourceName() then",
          "      Wait(100)",
          "      --Do Stuff here$0",
          "   end",
          "end)",

        ],
        "description": "This code runs as soon as a resource starts."
      },

      "onResourceStop" : { 
       
        "prefix": "onResourceStop", 
         
        "body": [  
    
          "AddEventHandler('onResourceStop', function(resource)",
          "   if resource == GetCurrentResourceName() then",
          "      --Do Stuff here$0",
          "   end",
          "end)",

        ],
        "description": "This code runs as soon as a resource is stopped."
      },
      
      "RegisterNetEvent" : { 
       
        "prefix": "RegisterNetEvent", 
         
        "body": [  
    
          "RegisterNetEvent('EventNameHere', function(data)",
          "    $0",
          "end)",
        ],
        "description": "placeholder"
      },

      "DrawText3D" : { 
       
        "prefix": "qbdrawtext3D", 
         
        "body": [  
    
          "function DrawText3D(x, y, z, text)",
          "    SetTextScale(0.35, 0.35)",
          "    SetTextFont(4)",
          "    SetTextProportional(1)",
          "    SetTextColour(255, 255, 255, 215)",
          "    SetTextEntry('STRING')",
          "    SetTextCentre(true)",
          "    AddTextComponentString(text)",
          "    SetDrawOrigin(x,y,z, 0)",
          "    DrawText(0.0, 0.0)",
          "    local factor = (string.len(text)) / 370",
          "    DrawRect(0.0, 0.0+0.0125, 0.017+ factor, 0.03, 0, 0, 0, 75)",
          "    ClearDrawOrigin()",
          "end",

        ],
        "description": "Another very common function you will see throughout the framework. This allows you to draw floating 3D text on the screen."
      },

      "GetPlayer" : { 
       
        "prefix": "qbgetplayer", 
         
        "body": [  
    
        "local Player = QBCore.Functions.GetPlayer(source)",
        
        ],
        "description": "This returns the player (server side)"
      },

      "PlayerData " : { 
       
        "prefix": "PlayerData", 
         
        "body": [  
    
        "local PlayerData = {}",
        "",
        "-- Sets the playerdata when spawned",
        "RegisterNetEvent('QBCore:Client:OnPlayerLoaded', function()",
        "    PlayerData = QBCore.Functions.GetPlayerData()",
        "end)",
        "",
        "-- Sets the playerdata to an empty table when the player has quit or did /logout",
        "RegisterNetEvent('QBCore:Client:OnPlayerUnload', function()",
        "    PlayerData = {}",
        "end)",
        "",
        "-- When the players job gets updated this will trigger and update the playerdata",
        "RegisterNetEvent('QBCore:Client:OnJobUpdate', function(JobInfo)",
        "    PlayerData.job = JobInfo",
        "end)",
        "",
        "-- When the players gang gets updated this will trigger and update the playerdata",
        "RegisterNetEvent('QBCore:Client:OnGangUpdate', function(GangInfo)",
        "    PlayerData.gang = GangInfo",
        "end)",
        "",
        "-- This will update all the PlayerData that doesn't get updated with a specific event other than this like the metadata",
        "RegisterNetEvent('QBCore:Player:SetPlayerData', function(val)",
        "    PlayerData = val",
        "end)",
        
        ],
        "description": "This is how to register playerdata without having to call the function everytime. -- Code thanks to BerkieB#5038"
      },

      "Progressbar" : { 
       
        "prefix": "qbprogress", 
         
        "body": [  
    
        "QBCore.Functions.Progressbar('name_here', 'Text that shows on bar...', 5000, false, true, { -- Name | Label | Time | useWhileDead | canCancel",
        "    disableMovement = true,",
        "    disableCarMovement = true,",
        "    disableMouse = false,",
        "    disableCombat = true,",
        "    }, {",
        "    animDict = 'anim@gangops@facility@servers@',",
        "    anim = 'hotwire',",
        "    flags = 16,",
        "    }, {}, {}, function() -- Play When Done",
        "         --Stuff goes here",
        "    end, function() -- Play When Cancel",
        "    --Stuff goes here",
        "end)",
        
        
        ],
        "description": "Allows you to call this function instead of using an export for the progress bar."
      },

      "SpawnVehicle" : { 
       
        "prefix": "qbspawnvehicle", 
         
        "body": [  
    
        "QBCore.Functions.SpawnVehicle(VehicleModel, function(veh)",
        "    $0",
        "end, coords, true)"
        
        ],
        "description": "Spawns a specific vehicle model."
      },

      "GetClosestVehicle" : { 
       
        "prefix": "qbgetclosestvehicle", 
         
        "body": [  
    
        "local vehicle = QBCore.Functions.GetClosestVehicle()",
        
        ],
        "description": "Returns the closest vehicle to the player at the time."
      },

      "TriggerCallback" : { 
       
        "prefix": "qbtriggercallback", 
         
        "body": [  
    
        "QBCore.Functions.TriggerCallback('CallbackName', function(result)",
        "    $0",
        "end)",
        
        
        ],
        "description": "Allows you to retrieve information by calling to the server and getting something in return."
      },

      "DeleteVehicle" : { 
       
        "prefix": "qbdeletevehicle", 
         
        "body": [  
    
        "QBCore.Functions.DeleteVehicle(Vehicle)",
        
        ],
        "description": "Deletes vehicle entity."
      },

      "ExampleManifest" : { 
       
        "prefix": "aalbonn.ExampleManifest", 
         
        "body": [  
    
            "fx_version 'adamant'",
            "game 'gta5'",
            " ",
            "description 'aalbonn Example Manifest'",
            "version '1.0.0'",
            " ",
            "shared_script { ",
	    "	 'config.lua',",
	    "	 '@qb-core/shared/locale.lua',",
 	    "	 'locales/en.lua',",
            "}",
            " ",
            "client_scripts {",
            "	 '@PolyZone/client.lua',",
            "	 '@PolyZone/BoxZone.lua',",
            "	 '@PolyZone/EntityZone.lua',",
            "    '@PolyZone/CircleZone.lua',",
            "    '@PolyZone/ComboZone.lua',",
            "    'client/*.lua' -- Globbing method for multiple files",
            "}",
            " ",
            "server_scripts {",
            "    'config/config_sv.lua', -- Non globbing method (Server config for keeping webhooks or other important information)",
            "    'server/*.lua' -- Globbing method for multiple files",
            "}",
            " ",
            "ui_page 'html/ui.html'",
            " ",
            "files {",
            "    'html/ui.html',",
            "    'html/css/main.css',",
            "    'html/js/*.js', -- Globbing also works here in case you have multiple js files",
            "    'html/js/app.js'",
            "}",
            " ",
	    "lua54 'yes' -- Add in case you want to use lua 5.4 (https://www.lua.org/manual/5.4/manual.html)",
        
        ],
        "description": "Pastes an Example Manifest for you to edit."
      },

      "LoadAnimDict" : { 
       
        "prefix": "LoadAnimDict", 
         
        "body": [  
    
      "function LoadAnimDict(dict)",
      "    while (not HasAnimDictLoaded(dict)) do",
      "        RequestAnimDict(dict)",
      "        Wait(5)",
      "    end",
      "end",

        ],
        "description": "Loads an Animation before its called"
      },

      "qb-target Box Zone" : { 
       
        "prefix": "AddBoxZone", 
         
        "body": [  

      "exports['qb-target']:AddBoxZone('BoxZoneName', vector3(123.4, -567.8, 910.11), 1, 1, {",
      "    name='BoxZoneName',",
      "    heading=57.45,",
      "    debugPoly=false,",
      "    minZ = 6.04,",
      "    maxZ = 7.64,",
      "    }, {",
      "        options = {",
      "            {",
      "                type = 'client',",
      "                event = 'ClientEventName',",
      "                icon = 'fas fa-user',",
      "                label = 'Target Label',",
      "            },",
      "        },",
      "    distance = 3.5",
      "})",

        ],
        "description": "Calls an export from qb-target"
      },
	"ExampleLang" : { 
       
        "prefix": "examplelang", 
         
        "body": [  
        "local Translations = {",
        "  error = {",
        "  },",
        "  success = {",
        "  },",
        "  info = {",
        "  },",
        "  email = {",
        "      mr = 'Mr',",
        "      mrs = 'Mrs',",
        "      sender = '',",
        "      subject = '',",
        "      message = '',",
        "  }",
        "}",
        "",
        "Lang = Locale:new({",
        "  phrases = Translations,",
        "  warnOnMissing = true,",
        "})",
        
        ],
        "description": "Deletes vehicle entity."
      },
}
