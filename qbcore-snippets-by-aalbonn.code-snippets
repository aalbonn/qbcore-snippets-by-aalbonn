	// Place your genel snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.

{
  "Notify": {
    "prefix": "qbnotify",
    "body": [
      "QBCore.Functions.Notify('${1:Default Text}', '${2:Type}')",
    ],
    "description": "error, sucess, primary, police, ambulance"
  },

  "ServerNotify": {
    "prefix": "qbnotifyserver",
    "body": [
      "QBCore.Functions.Notify(source, '${1:Default Text}', '${2:Type}')",
    ],
    "description": "error, sucess, primary, police, ambulance"
  },

  "GetPlayerData": {
    "prefix": "qbgetplayer",
    "body": [
    "local PlayerData = QBCore.Functions.GetPlayerData()",
    ],
    "description": "Get player data from the client"
  },

  "GetCoreObject()": {
    "prefix": "localexp",
    "body": [
      "local QBCore = exports['qb-core']:GetCoreObject()",
    ],
    "description": "QBCore new export method"
  },

  "isLoggedIn": {
    "prefix": "isLoggedIn",
    "body": [
      "LocalPlayer.state['isLoggedIn']",
    ],
    "description": "QBCore new isLoggedIn method"
  },

  "HasItem": {
    "prefix": "qbhasitem",
    "body": [
      "QBCore.Functions.HasItem('${1:Item}', ${2:Amount})"
    ],
    "description": "Returns whether or not a player has a certain item (client side)."
  },

  "HasItemserver": {
    "prefix": "qbhasitemserver",
    "body": [
      "QBCore.Functions.HasItem(source, '${1:Item}', ${2:Amount})"
    ],
    "description": "Returns whether or not a player has a certain item (server side)."
  },

  "Add Commands": {
    "prefix": "qbcommandsadd",
    "body": [
      "QBCore.Commands.Add('${1:Command}', '${2:Help Text}', {}, false, function(source, args)",
      "    $0",
      "end)",
    ],
    "description": "Add a command using QBCore.Commands.Add. You can add permissions after the end like 'end, 'god', 'admin')' "
  },

  "Create Item": {
    "prefix": "qbcreateitem",
    "body": [
      "QBCore.Functions.CreateUseableItem(${1:Item} , function(item)",
      "    $0",
      "end)",
    ],
    "description": "Makes an item useable."
  },

  "DrawText": {
    "prefix": "qbdrawtext",
    "body": [
      "function DrawText(x, y, width, height, scale, r, g, b, a, text)",
      "    SetTextFont(4)",
      "    SetTextProportional(0)",
      "    SetTextScale(scale, scale)",
      "    SetTextColour(r, g, b, a)",
      "    SetTextDropShadow(0, 0, 0, 0,255)",
      "    SetTextEdge(2, 0, 0, 0, 255)",
      "    SetTextDropShadow()",
      "    SetTextOutline()",
      "    SetTextEntry('STRING')",
      "    AddTextComponentString(text)",
      "    DrawText(x - width/2, y - height/2 + 0.005)",
      "end",
    ],
    "description": "Not used as commonly as 3D text, you can draw text on the screen with this function which makes it more convenient than having to make a new function locally."
  },

  "DrawText3D": {
    "prefix": "qbdrawtext3D",
    "body": [
      "function DrawText3D(x, y, z, text)",
      "    SetTextScale(0.35, 0.35)",
      "    SetTextFont(4)",
      "    SetTextProportional(1)",
      "    SetTextColour(255, 255, 255, 215)",
      "    SetTextEntry('STRING')",
      "    SetTextCentre(true)",
      "    AddTextComponentString(text)",
      "    SetDrawOrigin(x,y,z, 0)",
      "    DrawText(0.0, 0.0)",
      "    local factor = (string.len(text)) / 370",
      "    DrawRect(0.0, 0.0+0.0125, 0.017+ factor, 0.03, 0, 0, 0, 75)",
      "    ClearDrawOrigin()",
      "end",
    ],
    "description": "Another very common function you will see throughout the framework. This allows you to draw floating 3D text on the screen."
  },

  "CreateThread": {
    "prefix": "CreateThread",
    "body": [
      "CreateThread(function()",
      "    while true do",
      "        Wait(1)",
      "        ${1}",
      "    end",
      "end)"
    ],
    "description": "Create a thread"
  },

  "onResourceStart": {
    "prefix": "onResourceStart",
    "body": [
      "AddEventHandler('onResourceStart', function(resource)",
      "   if resource == GetCurrentResourceName() then",
      "      Wait(100)",
      "      $0",
      "   end",
      "end)",
    ],
    "description": "This code runs as soon as a resource starts."
  },

  "onResourceStop": {
    "prefix": "onResourceStop",
    "body": [
      "AddEventHandler('onResourceStop', function(resource)",
      "   if resource == GetCurrentResourceName() then",
      "      $0",
      "   end",
      "end)",
    ],
    "description": "This code runs as soon as a resource is stopped."
  },

  "RegisterNetEvent": {
    "prefix": "RegisterNetEvent",
    "body": [
      "RegisterNetEvent('${1:Event Name}', function(data)",
      "    $0",
      "end)",
    ],
    "description": "placeholder"
  },

  "GetPlayer": {
    "prefix": "localplayer", 
    "body": [
    "local Player = QBCore.Functions.GetPlayer(source)",
    ],
    "description": "(server side)"
  },

  "PlayerData ": {
    "prefix": "PlayerData",
    "body": [
      "local PlayerData = {}",
      "",
      "RegisterNetEvent('QBCore:Client:OnPlayerLoaded', function()",
      "    PlayerData = QBCore.Functions.GetPlayerData()",
      "end)",
      "",
      "RegisterNetEvent('QBCore:Client:OnPlayerUnload', function()",
      "    PlayerData = {}",
      "end)",
      "",
      "RegisterNetEvent('QBCore:Client:OnJobUpdate', function(JobInfo)",
      "    PlayerData.job = JobInfo",
      "end)",
      "",
      "RegisterNetEvent('QBCore:Client:OnGangUpdate', function(GangInfo)",
      "    PlayerData.gang = GangInfo",
      "end)",
      "",
      "RegisterNetEvent('QBCore:Player:SetPlayerData', function(val)",
      "    PlayerData = val",
      "end)",
    ],
    "description": "This is how to register playerdata without having to call the function everytime. -- Code thanks to BerkieB#5038"
  },

  "Progressbar": {
    "prefix": "qbprogress",
    "body": [
      "QBCore.Functions.Progressbar('name_here', 'Text that shows on bar...', 5000, false, true, { -- Name | Label | Time | useWhileDead | canCancel",
      "   disableMovement = true,",
      "   disableCarMovement = true,",
      "   disableMouse = false,",
      "   disableCombat = true,",
      " }, {}, {}, {}, function() -- Play When Done",
      "   --Stuff goes here",
      " end, function() -- Play When Cancel",
      "   --Stuff goes here",
      "end)",
    ],
    "description": "Allows you to call this function instead of using an export for the progress bar."
  },

  "SpawnVehicle": { 
    "prefix": "qbspawnvehicle",
    "body": [
      "QBCore.Functions.SpawnVehicle(VehicleModel, function(veh)",
      "    $0",
      "end, coords, true)"
    ],
    "description": "Spawns a specific vehicle model."
  },

  "GetClosestVehicle": {
    "prefix": "qbgetclosestvehicle",
    "body": [
      "local vehicle = QBCore.Functions.GetClosestVehicle()",
    ],
    "description": "Returns the closest vehicle to the player at the time."
  },

  "TriggerCallback": { 
    "prefix": "qbtriggercallback",
    "body": [
      "QBCore.Functions.TriggerCallback('${1:Callback Name}', function(result)",
      "    $0",
      "end)",
    ],
    "description": "Allows you to retrieve information by calling to the server and getting something in return."
  },

  "DeleteVehicle": {
    "prefix": "qbdeletevehicle",
    "body": [
      "QBCore.Functions.DeleteVehicle(Vehicle)",
    ],
    "description": "Deletes vehicle entity."
  },

  "ExampleManifest": {
    "prefix": "aalbonn.ExampleManifest",
    "body": [
      "fx_version 'cerulean'",
      "game 'gta5'",
      "",
      "description 'aalbonn Example Manifest'",
      "version '1.0.0'",
      "",
      "shared_scripts { ",
      "    '@qb-core/shared/locale.lua',",
      "    'locales/en.lua',",
      "    'config.lua',",
      "}",
      "",
      "client_scripts {",
      "    '@PolyZone/client.lua',",
      "    '@PolyZone/BoxZone.lua',",
      "    '@PolyZone/EntityZone.lua',",
      "    '@PolyZone/CircleZone.lua',",
      "    '@PolyZone/ComboZone.lua',",
      "    'client/*.lua'",
      "}",
      "",
      "server_scripts {",
      "    '@oxmysql/lib/MySQL.lua',",
      "    'config/config_sv.lua', -- Non globbing method (Server config for keeping webhooks or other important information)",
      "    'server/*.lua'",
      "}",
      "",
      "ui_page 'html/ui.html'",
      "",
      "files {",
      "    'html/ui.html',",
      "    'html/css/main.css',",
      "    'html/js/*.js', -- Globbing also works here in case you have multiple js files",
      "    'html/js/app.js'",
      "}",
      "",
      "dependencies{",
      "",
      "}",
      "",
      "lua54 'yes' -- Add in case you want to use lua 5.4 (https://www.lua.org/manual/5.4/manual.html)",
    ],
    "description": "Pastes an Example Manifest for you to edit."
  },

  "qb-target Box Zone": {
    "prefix": "AddBoxZone",
    "body": [
      "exports['qb-target']:AddBoxZone('BoxZoneName', ${1:Coordsv}, 1, 1, {",
      "    name='BoxZoneName',",
      "    heading=0.0,",
      "    debugPoly=false,",
      "    minZ = 0.0,",
      "    maxZ = 0.0,",
      "    }, {",
      "        options = {",
      "            {",
      "                type = 'client',",
      "                event = 'ClientEventName',",
      "                icon = 'fas fa-user',",
      "                label = 'Target Label',",
      "            },",
      "        },",
      "    distance = 3.5",
      "})",
    ],
    "description": "Calls an export from qb-target"
  },

  "ExampleLang": {
    "prefix": "examplelang",
    "body": [
      "local Translations = {",
      "  error = {",
      "  },",
      "  success = {",
      "  },",
      "  info = {",
      "  },",
      "  email = {",
      "      mr = 'Mr',",
      "      mrs = 'Mrs',",
      "      sender = '',",
      "      subject = '',",
      "      message = '',",
      "  }",
      "}",
      "",
      "Lang = Locale:new({",
      "  phrases = Translations,",
      "  warnOnMissing = true,",
      "})",
    ],
    "description": "Example Lang usage for locales."
  },

  "Lang": {
    "prefix": "lang",
    "body": [
      "Lang:t('${1:Translation}')",
    ],
    "description": "Just lang"
  },

  "localsrc": {
    "prefix": "localsrc",
    "body": [
      "local src = source",
    ],
    "description": "source to src"
  },

  "explogs": {
    "prefix": "explogs",
    "body": [
      "local Player = QBCore.Functions.GetPlayer(source)",
      "TriggerEvent('qb-log:server:CreateLog', '${1:Logs Channel}', '${2:Description}', 'red', '** '..Player.PlayerData.charinfo.firstname..' '..Player.PlayerData.charinfo.lastname..' ** (CitizenID: '..Player.PlayerData.citizenid..' | ID: '..source..' | License: '..Player.PlayerData.license..') | Steam: '..Player.PlayerData.steam..') **', false)",
    ],
    "description": "Detailed log for qbcore log system"
  },

  "expabnlog": {
    "prefix": "expabnlog",
    "body": [
      "local Player = QBCore.Functions.GetPlayer(source)",
      "TriggerEvent('aalbonn:logs', '${1:Log Channel}', '${2:Log Deails}', source, Player.PlayerData.source)",
    ],
    "description": "example aalbonn-log just for my log system"
  },

  "getmoney": {
    "prefix": "qbgetmoney",
    "body": [
      "local Player = QBCore.Functions.GetPlayer(source)",
      "Player.Functions.GetMoney('${1:Type}')",
    ],
    "description": "getmoney type"
  },

  "sendmailclient": {
    "prefix": "qbsendnewmailclient",
    "body": [
      "RegisterNetEvent('${1:Resource Name}:client:sendEmail', function(charinfo) -- usage TriggerClientEvent('Resource Name:client:sendEmail', Player.PlayerData.charinfo)",
      "    SetTimeout(math.random(2500, 4000), function()",
      "        local gender = Lang:t('email.mr')",
      "        if PlayerData.charinfo.gender == 1 then",
      "            gender = Lang:t('email.mrs')",
      "        end",
      "        TriggerServerEvent('qb-phone:server:sendNewMail', {",
      "            sender = Lang:t('email.sender'),",
      "            subject = Lang:t('email.subject'),",
      "            message =  Lang:t('email.message', {gender = gender, lastname = charinfo.lastname, firstname = charinfo.firstname, phone = charinfo.phone}),",
      "            button = {}",
      "        })",
      "    end)",
      "end)"
    ],
    "description": "Send mail (client side)"
  },

  "lsrplock": {
    "prefix": "lsrplock",
    "body": [
      "TriggerEvent('lsrp-lockpick:StartLockpickfo', function(result)",
        "if result then",
        "",
        "else",
        "   QBCore.Functions.Notify('Failed', 'error')",
        "end",
      "end)",
    ],
    "description": "lsrp lockpick https://github.com/aalbonn/lsrp-lockpickfo "
  },

  "HasItem Callback": {
    "prefix": "qbhasitemcallback",
    "body": [
      "QBCore.Functions.TriggerCallback('QBCore:HasItem', function(HasItem)",
      "    if HasItem then",
      "       $0",
      "    else",
      "        QBCore.Functions.Notify('You dont have the item', 'error')",
      "    end",
      "end, '${1:Item}')",
    ],
    "description": "Triggers callback from qb-core server (client use)"
  },

  "Emote Start": {
    "prefix": "emotestart",
    "body": [
      "TriggerEvent('animations:client:EmoteCommandStart', {'${1:Emote}'})"
    ],
    "description": "To start emote etc. in progressbar (dpemotes)"
  },

  "Emote Stop": {
    "prefix": "emotestop",
    "body": [
      "TriggerEvent('animations:client:EmoteCommandStart', {'c'})"
    ],
    "description": "To stop emote etc. in progressbar (dpemotes)"
  },

  "Register Command": {
    "prefix": "RegisterCommand",
    "body": [
      "RegisterCommand('${1:Command Here}', function(data)",
      " $0",
      "end)",
    ],
    "description": "register command (use qbcommandsadd if you are in server side)"
  },

  "aalbonn-base item control": {
    "prefix": "aalbonnitemcontol",
    "body": [
    "QBCore.Functions.TriggerCallback('aalbonn-base:item-kontrol', function(qtty)",
    "  if qtty > 0 then",
    "",
    "  else",
    "",
    "  end",
    "end, ${1:item})"
    ],
    "description": "it's just for my server"
  },

  "aalbonn-base hasmoney": {
    "prefix": "aalbonnhasmoney",
    "body": [
    "QBCore.Functions.TriggerCallback('aalbonn-base:HasMoney', function(result)",
    "  if result then",
    "",
    "  else",
    "     QBCore.Functions.Notify('Insufficent Money', 'error')",
    "  end",
    "end, '${1:type}', ${2:amount})"
    ],
    "description": "it's just for my server"
  },

  "Player Ped": {
    "prefix": "localped",
    "body": [
      "local ped = PlayerPedId()",
    ],
    "description": "playerped thing for client side"
  },

  "qb-menu": {
    "prefix": "expqbmenu",
    "body": [
    "exports['qb-menu']:openMenu({",
    "    {",
    "        header = '',",
    "        isMenuHeader = true",
    "    },",
    "    {",
    "        header = 'Close menu',",
    "        txt = '',",
    "        icon = 'fa-solid fa-angle-left',",
    "        params = {",
    "            event = 'qb-menu:closeMenu',",
    "            args = {}",
    "        }",
    "    },",
    "})"
    ],
    "description": "playerped thing for client side"
  },

  "Settimout": {
    "prefix": "settimout",
    "body": [
    "SetTimeout(5000, function()",
    "    $0",
    "end)"
    ],
    "description": "playerped thing for client side"
  },

  "function": {
    "prefix": "localfunction",
    "body": [
    "local function $0()",
    "    $1",
    "end"
    ],
    "description": "playerped thing for client side"
  },

  "setmetadata": {
    "prefix": "qbsetmetadata",
    "body": [
    "Player.Functions.SetMetaData('${1:MetaData}', ${2:Value})",
    ],
    "description": "playerped thing for client side"
  },

  "getplayerdata": {
    "prefix": "qbplayerdata",
    "body": [
    "QBCore.Functions.GetPlayerData()",
    ],
    "description": "get playerdata for only client side"
  },

  "ps-ui Circle": {
    "prefix": "pscircle",
    "body": [
      "exports['ps-ui']:Circle(function(success)",
      "  if success then",
      "    $1",
      "  else",
      "    $2",
      "  end",
      "end, $3, $4) -- NumberOfCircles, MS",
    ],
    "description": "ps-ui Circle export"
  },

  "ps-ui Maze": {
    "prefix": "psmaze",
    "body": [
    "exports['ps-ui']:Maze(function(success)",
    "  if success then",
    "     $1",
    "  else",
    "     $2",
    "  end",
    "end, $3) -- Hack Time Limit",
    ],
    "description": "ps-ui Maze export"
  },

  "ps-ui VarHack": {
    "prefix": "psvarhack",
    "body": [
    "exports['ps-ui']:VarHack(function(success)",
    "  if success then",
    "    $1",
    "  else",
    "    $2",
    "  end",
    "end, $3, $4) -- Number of Blocks, Time (seconds)",
    ],
    "description": "ps-ui Varhack export"
  },

  "ps-ui Thermite": {
    "prefix": "psthermite",
    "body": [
    "exports['ps-ui']:Thermite(function(success)",
    "  if success then",
    "    $1",
    "  else",
    "    $2",
    "  end",
    "end, $3, $4, $5) -- Time, Gridsize (5, 6, 7, 8, 9, 10), IncorrectBlocks",
    ],
    "description": "ps-ui Thermite export"
  },

  "ps-ui Scrambler": {
    "prefix": "psscrambler",
    "body": [
    "exports['ps-ui']:Scrambler(function(success)",
    "  if success then",
    "    $1",
    "  else",
    "    $2",
    "  end",
    "end, ${3:'type'}, $4, $5) -- Type (alphabet, numeric, alphanumeric, greek, braille, runes), Time (Seconds), Mirrored (0: Normal, 1: Normal + Mirrored 2: Mirrored only )",
    ],
    "description": "ps-ui Scrambler export"
  },

  "Has Permission": {
    "prefix": "qbhaspermission",
    "body": [
    " QBCore.Functions.HasPermission(source, '$1')"
    ],
    "description": "Has Permission for server side"
  },
}
